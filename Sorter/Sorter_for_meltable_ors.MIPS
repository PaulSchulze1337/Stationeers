##################################################
# All direct meltable ores where sorted out and
# put out on right output slot. All non-meltable
# ores where put out on left slot. The ores where
# detected using there hash vales.
###################################################
###config###
alias sorter d0
#alias ledDebug d1
alias occupienceState r0
alias itemHash r1 # stores hash of input item
# switch to logic mode: no auto eject
s sorter Mode 2

##program##
main:
yield #wait 0.5 sec.
# load occupience from slot 0 (input) of sorter
ls occupienceState sorter 0 Occupied
# do processing if slot 0 (input) is occupied
beq occupienceState 1 processing
j main

processing:
# read out hash from occupant item
ls itemHash sorter 0 OccupantHash
# write current item to display
#s ledDebug Setting itemHash
# check if we have a meltable item in input slot
# and branch to outputRight we have so.
beq itemHash  -707307845 outputRight #copper ore
beq itemHash -1348105509 outputRight #gold ore
beq itemHash  1758427767 outputRight #iron ore
beq itemHash  -190236170 outputRight #lead ore
beq itemHash  1830218956 outputRight #nickel ore
beq itemHash  1103972403 outputRight #silicon ore
beq itemHash  -916518678 outputRight #silver ore
# output other non-meltable items to left output
j outputLeft

# Left: field of view towards outputs
outputLeft:
s sorter Output 1 # put item out
j main

# Right: field of view towards outputs
outputRight:
s sorter Output 0 # put item out
j main